# -*- coding: utf-8 -*-
"""LSTM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RYUJ96qEkFFH1aibmAwYrOHcnEKIuRJD
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import pandas_datareader as data

!pip install --upgrade pandas
!pip install --upgrade pandas-datareader

start = '2010-01-01'
end = '2021-11-23'

df = data.DataReader('AAPL' , 'yahoo' , start , end )
df.head()

df.tail()

df=df.reset_index()

df.head()

df = df.drop(['Date','Adj Close'],axis=1)

df.head()

plt.plot(df.Close)

ma42 = df.Close.rolling(42).mean()
ma42

plt.figure(figsize=(12,8))
plt.plot(df.Close)
plt.plot(ma42,'r')

sma = df.Close.rolling(200).mean()
sma

plt.figure(figsize=(12,8))
plt.plot(df.Close)
plt.plot(ma42,'r')
plt.plot(sma,'g')

df.shape

data_training = pd.DataFrame(df['Close'][0:int(len(df)*0.70)])
data_testing = pd.DataFrame(df['Close'][int(len(df)*0.70):int(len(df))])

print(data_training.shape)
print(data_testing.shape)

data_training.head()

data_testing.head()

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler(feature_range=(0,1))

data_training_arr = scaler.fit_transform(data_training)
data_training_arr

data_training_arr.shape

x_train = []
y_train = []

for i in range(42,data_training_arr.shape[0]):
  x_train.append(data_training_arr[i-42 : i])
  y_train.append(data_training_arr[i,0])

x_train , y_train = np.array(x_train),np.array(y_train)

x_train.shape

"""# **ML Model**"""

from keras.layers import Dense ,Dropout,LSTM
from keras.models import Sequential

model = Sequential()
model.add(LSTM(units=50,activation='relu',return_sequences=True,
               input_shape=(x_train.shape[1],1)))
model.add(Dropout(0.2))


model.add(LSTM(units=60,activation='relu',return_sequences=True))
model.add(Dropout(0.3))


model.add(LSTM(units = 80,activation='relu',return_sequences=True))
model.add(Dropout(0.4))


model.add(LSTM(units=120,activation='relu'))
model.add(Dropout(0.5))

model.add(Dense(units=1))

model.summary()

model.compile(optimizer='adam',loss='mean_squared_error')
model.fit(x_train,y_train,epochs=50)

model.save('kreas_model.h5')

data_training.tail(42)

past_42_days = data_training.tail(42)
past_42_days

final_df=past_42_days.append(data_testing,ignore_index=True)

final_df.head()

final_df.tail()

data_input = scaler.fit_transform(final_df)

data_input

x_test = []
y_test = []


for i in range(42,data_input.shape[0]):
  x_test.append(data_input[i-42:i])
  y_test.append(data_input[i,0])

x_test , y_test = np.array(x_test),np.array(y_test)

print(x_test.shape)
print(y_test.shape)

y_pred = model.predict(x_test)

y_pred.shape

y_test

y_pred

scaler.scale_

scale_fact = 1/0.00794518
y_pred = y_pred * scale_fact
y_test = y_test * scale_fact

y_test

y_pred

plt.figure(figsize=(12,6))
plt.plot(y_test , 'b' , label= 'Orignal Price')
plt.plot(y_pred , 'r' , label = 'Predicted price')
plt.xlabel('TIME')
plt.ylabel('PRICE')
plt.legend()
plt.show()

